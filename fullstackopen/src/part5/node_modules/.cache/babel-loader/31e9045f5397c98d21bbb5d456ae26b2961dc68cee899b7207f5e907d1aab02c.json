{"ast":null,"code":"import axios from 'axios';\nconst jwt = require('jsonwebtoken');\nconst baseUrl = 'http://localhost:3001/api/notes';\nconst User = require('../models/user');\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\nconst getTokenFrom = request => {\n  const authorization = request.get('authorization');\n  if (authorization && authorization.toLowerCase().startsWith('bearer ')) {\n    return authorization.substring(7);\n  }\n  return null;\n};\nconst create = async (newObject, response) => {\n  const request = axios.post(baseUrl, newObject);\n  //   return request.then(response => response.data)\n  const body = request.body;\n  const token = getTokenFrom(request);\n  const decodedToken = jwt.verify(token, process.env.SECRET);\n  if (!decodedToken.id) {\n    return response.status(401).json({\n      error: 'token missing or invalid'\n    });\n  }\n  const user = await User.findById(decodedToken.id);\n  const note = new Note({\n    content: body.content,\n    important: body.important === undefined ? false : body.important,\n    date: new Date(),\n    user: user._id\n  });\n  const savedNote = await note.save();\n  await user.save();\n  response.status(201).json(savedNote);\n};\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\nconst noteService = {\n  getAll,\n  create,\n  update\n};\nexport default noteService;","map":{"version":3,"names":["axios","jwt","require","baseUrl","User","getAll","request","get","then","response","data","getTokenFrom","authorization","toLowerCase","startsWith","substring","create","newObject","post","body","token","decodedToken","verify","process","env","SECRET","id","status","json","error","user","findById","note","Note","content","important","undefined","date","Date","_id","savedNote","save","update","put","noteService"],"sources":["/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/fullstackopen/src/part5/src/services/notes.js"],"sourcesContent":["import axios from 'axios'\nconst jwt = require('jsonwebtoken')\nconst baseUrl = 'http://localhost:3001/api/notes'\nconst User = require('../models/user')\n\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n\n  return request.then(response => response.data)\n}\n\nconst getTokenFrom = request => {\n  const authorization = request.get('authorization')\n  if (authorization && authorization.toLowerCase().startsWith('bearer ')) {\n    return authorization.substring(7)\n  }\n  return null\n}\n\nconst create = async (newObject, response) => {\n  const request = axios.post(baseUrl, newObject)\n//   return request.then(response => response.data)\n  const body = request.body\n  const token = getTokenFrom(request)\n  const decodedToken = jwt.verify(token, process.env.SECRET)\n  if (!decodedToken.id) {\n      return response.status(401).json({ error: 'token missing or invalid' })\n    }\n    const user = await User.findById(decodedToken.id)\n    \n    const note = new Note({\n        content: body.content,\n        important: body.important === undefined ? false : body.important,\n        date: new Date(),\n        user: user._id\n    })\n    \n    const savedNote = await note.save()\n    await user.save()\n    response.status(201).json(savedNote)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst noteService = {\n    getAll,\n    create,\n    update,\n  }\nexport default noteService\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,GAAG,GAAGC,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMC,OAAO,GAAG,iCAAiC;AACjD,MAAMC,IAAI,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAGtC,MAAMG,MAAM,GAAG,MAAM;EACnB,MAAMC,OAAO,GAAGN,KAAK,CAACO,GAAG,CAACJ,OAAO,CAAC;EAElC,OAAOG,OAAO,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;AAChD,CAAC;AAED,MAAMC,YAAY,GAAGL,OAAO,IAAI;EAC9B,MAAMM,aAAa,GAAGN,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAClD,IAAIK,aAAa,IAAIA,aAAa,CAACC,WAAW,EAAE,CAACC,UAAU,CAAC,SAAS,CAAC,EAAE;IACtE,OAAOF,aAAa,CAACG,SAAS,CAAC,CAAC,CAAC;EACnC;EACA,OAAO,IAAI;AACb,CAAC;AAED,MAAMC,MAAM,GAAG,OAAOC,SAAS,EAAER,QAAQ,KAAK;EAC5C,MAAMH,OAAO,GAAGN,KAAK,CAACkB,IAAI,CAACf,OAAO,EAAEc,SAAS,CAAC;EAChD;EACE,MAAME,IAAI,GAAGb,OAAO,CAACa,IAAI;EACzB,MAAMC,KAAK,GAAGT,YAAY,CAACL,OAAO,CAAC;EACnC,MAAMe,YAAY,GAAGpB,GAAG,CAACqB,MAAM,CAACF,KAAK,EAAEG,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;EAC1D,IAAI,CAACJ,YAAY,CAACK,EAAE,EAAE;IAClB,OAAOjB,QAAQ,CAACkB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAA2B,CAAC,CAAC;EACzE;EACA,MAAMC,IAAI,GAAG,MAAM1B,IAAI,CAAC2B,QAAQ,CAACV,YAAY,CAACK,EAAE,CAAC;EAEjD,MAAMM,IAAI,GAAG,IAAIC,IAAI,CAAC;IAClBC,OAAO,EAAEf,IAAI,CAACe,OAAO;IACrBC,SAAS,EAAEhB,IAAI,CAACgB,SAAS,KAAKC,SAAS,GAAG,KAAK,GAAGjB,IAAI,CAACgB,SAAS;IAChEE,IAAI,EAAE,IAAIC,IAAI,EAAE;IAChBR,IAAI,EAAEA,IAAI,CAACS;EACf,CAAC,CAAC;EAEF,MAAMC,SAAS,GAAG,MAAMR,IAAI,CAACS,IAAI,EAAE;EACnC,MAAMX,IAAI,CAACW,IAAI,EAAE;EACjBhC,QAAQ,CAACkB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACY,SAAS,CAAC;AACxC,CAAC;AAED,MAAME,MAAM,GAAG,CAAChB,EAAE,EAAET,SAAS,KAAK;EAChC,MAAMX,OAAO,GAAGN,KAAK,CAAC2C,GAAG,CAAE,GAAExC,OAAQ,IAAGuB,EAAG,EAAC,EAAET,SAAS,CAAC;EACxD,OAAOX,OAAO,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;AAChD,CAAC;AAED,MAAMkC,WAAW,GAAG;EAChBvC,MAAM;EACNW,MAAM;EACN0B;AACF,CAAC;AACH,eAAeE,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}