{"ast":null,"code":"const noteReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'NEW_NOTE':\n      // return state.concat(action.payload)\n      return [...state, action.payload];\n    case 'TOGGLE_IMPORTANCE':\n      const id = action.payload.id;\n      const noteToChange = state.find(n => n.id === id);\n      const changedNote = {\n        ...noteToChange,\n        important: !noteToChange.important\n      };\n      return state.map(note => note.id !== id ? note : changedNote);\n    default:\n      return state;\n  }\n};\nconst generateId = () => Number((Math.random() * 1000000).toFixed(0));\nexport const createNote = content => {\n  return {\n    type: 'NEW_NOTE',\n    payload: {\n      content,\n      important: false,\n      id: generateId()\n    }\n  };\n};\nexport const toggleImportanceOf = id => {\n  return {\n    type: 'TOGGLE_IMPORTANCE',\n    payload: {\n      id\n    }\n  };\n};\nexport default noteReducer;\n\n// const noteReducer = (state = [], action) => {\n//   if (action.type === 'NEW_NOTE') {\n//     state.push(action.payload)\n//     return state\n//   }\n\n//   return state\n// }\n\n// const store = createStore(noteReducer)\n\n// store.dispatch({\n//   type: 'NEW_NOTE',\n//   payload: {\n//     content: 'the app state is in redux store',\n//     important: true,\n//     id: 1\n//   }\n// })\n\n// store.dispatch({\n//   type: 'NEW_NOTE',\n//   payload: {\n//     content: 'state changes are made with actions',\n//     important: false,\n//     id: 2\n//   }\n// })\n\n// const App = () => {\n//   return(\n//     <div>\n//       <ul>\n//         {store.getState().map(note=>\n//           <li key={note.id}>\n//             {note.content} <strong>{note.important ? 'important' : ''}</strong>\n//           </li>\n//         )}\n//         </ul>\n//     </div>\n//   )\n// }","map":{"version":3,"names":["noteReducer","state","arguments","length","undefined","action","type","payload","id","noteToChange","find","n","changedNote","important","map","note","generateId","Number","Math","random","toFixed","createNote","content","toggleImportanceOf"],"sources":["/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/part6/unicafe-redux/src/reducers/noteReducer.js"],"sourcesContent":["const noteReducer = (state = [], action) => {\n    switch(action.type) {\n      case 'NEW_NOTE':\n        // return state.concat(action.payload)\n        return [...state, action.payload]\n      case 'TOGGLE_IMPORTANCE':\n        const id = action.payload.id\n        const noteToChange = state.find(n => n.id === id)\n        const changedNote = { \n          ...noteToChange, \n          important: !noteToChange.important \n        }\n        return state.map(note =>\n          note.id !== id ? note : changedNote \n        )\n      default:\n        return state\n      }\n    } \n  \n  const generateId = () =>\n    Number((Math.random() * 1000000).toFixed(0))\n  \n  export const createNote = (content) => {\n    return {\n      type: 'NEW_NOTE',\n      payload: {\n        content,\n        important: false,\n        id: generateId()\n      }\n    }\n  }\n  \n  export const toggleImportanceOf = (id) => {\n    return {\n      type: 'TOGGLE_IMPORTANCE',\n      payload: { id }\n    }\n  }  \n  \n  export default noteReducer\n\n// const noteReducer = (state = [], action) => {\n//   if (action.type === 'NEW_NOTE') {\n//     state.push(action.payload)\n//     return state\n//   }\n\n//   return state\n// }\n\n// const store = createStore(noteReducer)\n\n// store.dispatch({\n//   type: 'NEW_NOTE',\n//   payload: {\n//     content: 'the app state is in redux store',\n//     important: true,\n//     id: 1\n//   }\n// })\n\n// store.dispatch({\n//   type: 'NEW_NOTE',\n//   payload: {\n//     content: 'state changes are made with actions',\n//     important: false,\n//     id: 2\n//   }\n// })\n\n// const App = () => {\n//   return(\n//     <div>\n//       <ul>\n//         {store.getState().map(note=>\n//           <li key={note.id}>\n//             {note.content} <strong>{note.important ? 'important' : ''}</strong>\n//           </li>\n//         )}\n//         </ul>\n//     </div>\n//   )\n// }"],"mappings":"AAAA,MAAMA,WAAW,GAAG,SAAAA,CAAA,EAAwB;EAAA,IAAvBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACnC,QAAOC,MAAM,CAACC,IAAI;IAChB,KAAK,UAAU;MACb;MACA,OAAO,CAAC,GAAGL,KAAK,EAAEI,MAAM,CAACE,OAAO,CAAC;IACnC,KAAK,mBAAmB;MACtB,MAAMC,EAAE,GAAGH,MAAM,CAACE,OAAO,CAACC,EAAE;MAC5B,MAAMC,YAAY,GAAGR,KAAK,CAACS,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;MACjD,MAAMI,WAAW,GAAG;QAClB,GAAGH,YAAY;QACfI,SAAS,EAAE,CAACJ,YAAY,CAACI;MAC3B,CAAC;MACD,OAAOZ,KAAK,CAACa,GAAG,CAACC,IAAI,IACnBA,IAAI,CAACP,EAAE,KAAKA,EAAE,GAAGO,IAAI,GAAGH,WAAW,CACpC;IACH;MACE,OAAOX,KAAK;EAAA;AAEhB,CAAC;AAEH,MAAMe,UAAU,GAAGA,CAAA,KACjBC,MAAM,CAAC,CAACC,IAAI,CAACC,MAAM,EAAE,GAAG,OAAO,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;AAE9C,OAAO,MAAMC,UAAU,GAAIC,OAAO,IAAK;EACrC,OAAO;IACLhB,IAAI,EAAE,UAAU;IAChBC,OAAO,EAAE;MACPe,OAAO;MACPT,SAAS,EAAE,KAAK;MAChBL,EAAE,EAAEQ,UAAU;IAChB;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMO,kBAAkB,GAAIf,EAAE,IAAK;EACxC,OAAO;IACLF,IAAI,EAAE,mBAAmB;IACzBC,OAAO,EAAE;MAAEC;IAAG;EAChB,CAAC;AACH,CAAC;AAED,eAAeR,WAAW;;AAE5B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}