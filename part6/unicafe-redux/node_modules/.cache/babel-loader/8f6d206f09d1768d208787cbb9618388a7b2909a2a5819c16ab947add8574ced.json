{"ast":null,"code":"const initialState = {\n  good: 0,\n  ok: 0,\n  bad: 0\n};\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(action);\n  switch (action.type) {\n    case 'GOOD':\n      return [...state, action.payload];\n    case 'OK':\n      return [...state, action.payload];\n    case 'BAD':\n      return state;\n    case 'ZERO':\n      return state;\n    default:\n      return state;\n  }\n};\nexport default counterReducer;","map":{"version":3,"names":["initialState","good","ok","bad","counterReducer","state","arguments","length","undefined","action","console","log","type","payload"],"sources":["/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/part6/src/reducer.js"],"sourcesContent":["const initialState = {\n    good: 0,\n    ok: 0,\n    bad: 0\n  }\n  \n  const counterReducer = (state = initialState, action) => {\n    console.log(action)\n    switch (action.type) {\n      case 'GOOD':\n        return [...state, action.payload]\n      case 'OK':\n        return [...state, action.payload]\n      case 'BAD':\n        return state\n      case 'ZERO':\n        return state\n      default: return state\n    }\n    \n  }\n  \n  export default counterReducer"],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACjBC,IAAI,EAAE,CAAC;EACPC,EAAE,EAAE,CAAC;EACLC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,cAAc,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGN,YAAY;EAAA,IAAES,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAClDE,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EACnB,QAAQA,MAAM,CAACG,IAAI;IACjB,KAAK,MAAM;MACT,OAAO,CAAC,GAAGP,KAAK,EAAEI,MAAM,CAACI,OAAO,CAAC;IACnC,KAAK,IAAI;MACP,OAAO,CAAC,GAAGR,KAAK,EAAEI,MAAM,CAACI,OAAO,CAAC;IACnC,KAAK,KAAK;MACR,OAAOR,KAAK;IACd,KAAK,MAAM;MACT,OAAOA,KAAK;IACd;MAAS,OAAOA,KAAK;EAAA;AAGzB,CAAC;AAED,eAAeD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}