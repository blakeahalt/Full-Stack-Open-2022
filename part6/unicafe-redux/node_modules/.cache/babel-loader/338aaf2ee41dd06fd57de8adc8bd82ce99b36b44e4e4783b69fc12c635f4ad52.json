{"ast":null,"code":"var _jsxFileName = \"/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/part6/src/reducers/noteReducer.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// const noteReducer = (state = [], action) => {\n//     switch(action.type) {\n//       case 'NEW_NOTE':\n//         return [...state, action.payload]\n//       case 'TOGGLE_IMPORTANCE':\n//         const id = action.payload.id\n//         const noteToChange = state.find(n => n.id === id)\n//         const changedNote = { \n//           ...noteToChange, \n//           important: !noteToChange.important \n//         }\n//         return state.map(note =>\n//           note.id !== id ? note : changedNote \n//         )\n//       default:\n//         return state\n//       }\n//     } \n\n//   const generateId = () =>\n//     Number((Math.random() * 1000000).toFixed(0))\n\n//   export const createNote = (content) => {\n//     return {\n//       type: 'NEW_NOTE',\n//       payload: {\n//         content,\n//         important: false,\n//         id: generateId()\n//       }\n//     }\n//   }\n\n//   export const toggleImportanceOf = (id) => {\n//     return {\n//       type: 'TOGGLE_IMPORTANCE',\n//       payload: { id }\n//     }\n//   }  \n\n//   export default noteReducer\n\nconst noteReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type === 'NEW_NOTE') {\n    state.push(action.payload);\n    return state;\n  }\n  return state;\n};\nconst store = createStore(noteReducer);\nstore.dispatch({\n  type: 'NEW_NOTE',\n  payload: {\n    content: 'the app state is in redux store',\n    important: true,\n    id: 1\n  }\n});\nstore.dispatch({\n  type: 'NEW_NOTE',\n  payload: {\n    content: 'state changes are made with actions',\n    important: false,\n    id: 2\n  }\n});\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: store.getState().map(note => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [note.content, \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: note.important ? 'important' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 28\n        }, this)]\n      }, note.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["noteReducer","state","action","type","push","payload","store","createStore","dispatch","content","important","id","App","getState","map","note"],"sources":["/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/part6/src/reducers/noteReducer.js"],"sourcesContent":["// const noteReducer = (state = [], action) => {\n//     switch(action.type) {\n//       case 'NEW_NOTE':\n//         return [...state, action.payload]\n//       case 'TOGGLE_IMPORTANCE':\n//         const id = action.payload.id\n//         const noteToChange = state.find(n => n.id === id)\n//         const changedNote = { \n//           ...noteToChange, \n//           important: !noteToChange.important \n//         }\n//         return state.map(note =>\n//           note.id !== id ? note : changedNote \n//         )\n//       default:\n//         return state\n//       }\n//     } \n  \n//   const generateId = () =>\n//     Number((Math.random() * 1000000).toFixed(0))\n  \n//   export const createNote = (content) => {\n//     return {\n//       type: 'NEW_NOTE',\n//       payload: {\n//         content,\n//         important: false,\n//         id: generateId()\n//       }\n//     }\n//   }\n  \n//   export const toggleImportanceOf = (id) => {\n//     return {\n//       type: 'TOGGLE_IMPORTANCE',\n//       payload: { id }\n//     }\n//   }  \n  \n//   export default noteReducer\n\nconst noteReducer = (state = [], action) => {\n  if (action.type === 'NEW_NOTE') {\n    state.push(action.payload)\n    return state\n  }\n\n  return state\n}\n\nconst store = createStore(noteReducer)\n\nstore.dispatch({\n  type: 'NEW_NOTE',\n  payload: {\n    content: 'the app state is in redux store',\n    important: true,\n    id: 1\n  }\n})\n\nstore.dispatch({\n  type: 'NEW_NOTE',\n  payload: {\n    content: 'state changes are made with actions',\n    important: false,\n    id: 2\n  }\n})\n\nconst App = () => {\n  return(\n    <div>\n      <ul>\n        {store.getState().map(note=>\n          <li key={note.id}>\n            {note.content} <strong>{note.important ? 'important' : ''}</strong>\n          </li>\n        )}\n        </ul>\n    </div>\n  )\n}"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMA,WAAW,GAAG,YAAwB;EAAA,IAAvBC,KAAK,uEAAG,EAAE;EAAA,IAAEC,MAAM;EACrC,IAAIA,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9BF,KAAK,CAACG,IAAI,CAACF,MAAM,CAACG,OAAO,CAAC;IAC1B,OAAOJ,KAAK;EACd;EAEA,OAAOA,KAAK;AACd,CAAC;AAED,MAAMK,KAAK,GAAGC,WAAW,CAACP,WAAW,CAAC;AAEtCM,KAAK,CAACE,QAAQ,CAAC;EACbL,IAAI,EAAE,UAAU;EAChBE,OAAO,EAAE;IACPI,OAAO,EAAE,iCAAiC;IAC1CC,SAAS,EAAE,IAAI;IACfC,EAAE,EAAE;EACN;AACF,CAAC,CAAC;AAEFL,KAAK,CAACE,QAAQ,CAAC;EACbL,IAAI,EAAE,UAAU;EAChBE,OAAO,EAAE;IACPI,OAAO,EAAE,qCAAqC;IAC9CC,SAAS,EAAE,KAAK;IAChBC,EAAE,EAAE;EACN;AACF,CAAC,CAAC;AAEF,MAAMC,GAAG,GAAG,MAAM;EAChB,oBACE;IAAA,uBACE;MAAA,UACGN,KAAK,CAACO,QAAQ,EAAE,CAACC,GAAG,CAACC,IAAI,iBACxB;QAAA,WACGA,IAAI,CAACN,OAAO,EAAC,GAAC;UAAA,UAASM,IAAI,CAACL,SAAS,GAAG,WAAW,GAAG;QAAE;UAAA;UAAA;UAAA;QAAA,QAAU;MAAA,GAD5DK,IAAI,CAACJ,EAAE;QAAA;QAAA;QAAA;MAAA,QAEX;IACN;MAAA;MAAA;MAAA;IAAA;EACI;IAAA;IAAA;IAAA;EAAA,QACH;AAEV,CAAC;AAAA,KAZKC,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}