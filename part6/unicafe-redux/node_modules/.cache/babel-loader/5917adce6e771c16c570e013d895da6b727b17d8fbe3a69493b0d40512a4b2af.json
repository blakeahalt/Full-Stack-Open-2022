{"ast":null,"code":"var _jsxFileName = \"/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/part6/src/index.js\";\n// import React from 'react'\n// import ReactDOM from 'react-dom/client'\n\n// import { createStore } from 'redux'\n// import { Provider } from 'react-redux'\n\n// import App from './App'\n// import noteReducer from './reducers/NoteReducer'\n\n// const store = createStore(noteReducer)\n\n// ReactDOM.createRoot(document.getElementById('root')).render(\n//   <Provider store={store}>\n//     <App />\n//   </Provider>\n// )\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { createStore } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    case 'DECREMENT':\n      return state - 1;\n    case 'ZERO':\n      return 0;\n    default:\n      return state;\n  }\n};\nconst noteReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type === 'NEW_NOTE') {\n    state.push(action.payload);\n    return state;\n  }\n  con;\n  return state;\n};\nconst store = createStore(noteReducer);\nstore.dispatch({\n  type: 'NEW_NOTE',\n  payload: {\n    content: 'the app state is in redux store',\n    important: true,\n    id: 1\n  }\n});\nstore.dispatch({\n  type: 'NEW_NOTE',\n  payload: {\n    content: 'state changes are made with actions',\n    important: false,\n    id: 2\n  }\n});\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: store.getState().map(note => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [note.content, \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: note.important ? 'important' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 28\n        }, this)]\n      }, note.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n// const store = createStore(counterReducer)\n\n// const App = () => {\n//   return (\n//     <div>\n//       <div>\n//         {store.getState()}\n//       </div>\n//       <button \n//         onClick={e => store.dispatch({ type: 'INCREMENT' })}\n//       >\n//         plus\n//       </button>\n//       <button\n//         onClick={e => store.dispatch({ type: 'DECREMENT' })}\n//       >\n//         minus\n//       </button>\n//       <button \n//         onClick={e => store.dispatch({ type: 'ZERO' })}\n//       >\n//         zero\n//       </button>\n//     </div>\n//   )\n// }\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst renderApp = () => {\n  root.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 15\n  }, this));\n};\nrenderApp();\nstore.subscribe(renderApp);\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","createStore","configureStore","counterReducer","state","action","type","noteReducer","push","payload","con","store","dispatch","content","important","id","App","getState","map","note","root","createRoot","document","getElementById","renderApp","render","subscribe"],"sources":["/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/part6/src/index.js"],"sourcesContent":["// import React from 'react'\n// import ReactDOM from 'react-dom/client'\n\n// import { createStore } from 'redux'\n// import { Provider } from 'react-redux'\n\n// import App from './App'\n// import noteReducer from './reducers/NoteReducer'\n\n// const store = createStore(noteReducer)\n\n// ReactDOM.createRoot(document.getElementById('root')).render(\n//   <Provider store={store}>\n//     <App />\n//   </Provider>\n// )\n\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\n\nimport { createStore } from 'redux'\nimport { configureStore } from '@reduxjs/toolkit';\n\nconst counterReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    case 'ZERO':\n      return 0\n    default:\n      return state\n  }\n}\n\nconst noteReducer = (state = [], action) => {\n  if (action.type === 'NEW_NOTE') {\n    state.push(action.payload)\n    return state\n  }\n  con\n  return state\n}\n\nconst store = createStore(noteReducer)\n\nstore.dispatch({\n  type: 'NEW_NOTE',\n  payload: {\n    content: 'the app state is in redux store',\n    important: true,\n    id: 1\n  }\n})\n\nstore.dispatch({\n  type: 'NEW_NOTE',\n  payload: {\n    content: 'state changes are made with actions',\n    important: false,\n    id: 2\n  }\n})\n\nconst App = () => {\n  return(\n    <div>\n      <ul>\n        {store.getState().map(note=>\n          <li key={note.id}>\n            {note.content} <strong>{note.important ? 'important' : ''}</strong>\n          </li>\n        )}\n        </ul>\n    </div>\n  )\n}\n\n// const store = createStore(counterReducer)\n\n// const App = () => {\n//   return (\n//     <div>\n//       <div>\n//         {store.getState()}\n//       </div>\n//       <button \n//         onClick={e => store.dispatch({ type: 'INCREMENT' })}\n//       >\n//         plus\n//       </button>\n//       <button\n//         onClick={e => store.dispatch({ type: 'DECREMENT' })}\n//       >\n//         minus\n//       </button>\n//       <button \n//         onClick={e => store.dispatch({ type: 'ZERO' })}\n//       >\n//         zero\n//       </button>\n//     </div>\n//   )\n// }\n\nconst root = ReactDOM.createRoot(document.getElementById('root'))\n\nconst renderApp = () => {\n  root.render(<App />)\n}\n\nrenderApp()\nstore.subscribe(renderApp)"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AAEvC,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,cAAc,QAAQ,kBAAkB;AAAC;AAElD,MAAMC,cAAc,GAAG,YAAuB;EAAA,IAAtBC,KAAK,uEAAG,CAAC;EAAA,IAAEC,MAAM;EACvC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,WAAW;MACd,OAAOF,KAAK,GAAG,CAAC;IAClB,KAAK,WAAW;MACd,OAAOA,KAAK,GAAG,CAAC;IAClB,KAAK,MAAM;MACT,OAAO,CAAC;IACV;MACE,OAAOA,KAAK;EAAA;AAElB,CAAC;AAED,MAAMG,WAAW,GAAG,YAAwB;EAAA,IAAvBH,KAAK,uEAAG,EAAE;EAAA,IAAEC,MAAM;EACrC,IAAIA,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9BF,KAAK,CAACI,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC;IAC1B,OAAOL,KAAK;EACd;EACAM,GAAG;EACH,OAAON,KAAK;AACd,CAAC;AAED,MAAMO,KAAK,GAAGV,WAAW,CAACM,WAAW,CAAC;AAEtCI,KAAK,CAACC,QAAQ,CAAC;EACbN,IAAI,EAAE,UAAU;EAChBG,OAAO,EAAE;IACPI,OAAO,EAAE,iCAAiC;IAC1CC,SAAS,EAAE,IAAI;IACfC,EAAE,EAAE;EACN;AACF,CAAC,CAAC;AAEFJ,KAAK,CAACC,QAAQ,CAAC;EACbN,IAAI,EAAE,UAAU;EAChBG,OAAO,EAAE;IACPI,OAAO,EAAE,qCAAqC;IAC9CC,SAAS,EAAE,KAAK;IAChBC,EAAE,EAAE;EACN;AACF,CAAC,CAAC;AAEF,MAAMC,GAAG,GAAG,MAAM;EAChB,oBACE;IAAA,uBACE;MAAA,UACGL,KAAK,CAACM,QAAQ,EAAE,CAACC,GAAG,CAACC,IAAI,iBACxB;QAAA,WACGA,IAAI,CAACN,OAAO,EAAC,GAAC;UAAA,UAASM,IAAI,CAACL,SAAS,GAAG,WAAW,GAAG;QAAE;UAAA;UAAA;UAAA;QAAA,QAAU;MAAA,GAD5DK,IAAI,CAACJ,EAAE;QAAA;QAAA;QAAA;MAAA,QAEX;IACN;MAAA;MAAA;MAAA;IAAA;EACI;IAAA;IAAA;IAAA;EAAA,QACH;AAEV,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,KAvCMC,GAAG;AAyCT,MAAMI,IAAI,GAAGpB,QAAQ,CAACqB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEjE,MAAMC,SAAS,GAAG,MAAM;EACtBJ,IAAI,CAACK,MAAM,eAAC,QAAC,GAAG;IAAA;IAAA;IAAA;EAAA,QAAG,CAAC;AACtB,CAAC;AAEDD,SAAS,EAAE;AACXb,KAAK,CAACe,SAAS,CAACF,SAAS,CAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}