{"ast":null,"code":"import _slicedToArray from\"/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/fullstackopen/src/part5/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// import { useState, forwardRef, useImperativeHandle } from 'react'\n// import PropTypes from 'prop-types'\n// const Togglable = forwardRef((props, refs) => {\n//   const [visible, setVisible] = useState(false)\n//   const hideWhenVisible = { display: visible ? 'none' : '' }\n//   const showWhenVisible = { display: visible ? '' : 'none' }\n//   const toggleVisibility = () => {\n//     setVisible(!visible)\n//   }\n//   useImperativeHandle(refs, () => {\n//     return {\n//       toggleVisibility\n//     }\n//   })\n//   Togglable.propTypes = {\n//     buttonLabel: PropTypes.string.isRequired\n//   }\n//   Togglable.displayName = 'Togglable'\n//   return (\n//     <div>\n//       <div style={hideWhenVisible}>\n//         <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n//       </div>\n//       <div style={showWhenVisible} className='togglableContent'>\n//         {props.children}\n//         <button onClick={toggleVisibility}>cancel</button>\n//       </div>\n//     </div>\n//   )\n// })\n// export default Togglable\n// // import { useState } from 'react'\n// // const Togglable = (props) => {\n// //   const [visible, setVisible] = useState(false)\n// //   const hideWhenVisible = { display: visible ? 'none' : '' }\n// //   const showWhenVisible = { display: visible ? '' : 'none' }\n// //   const toggleVisibility = () => {\n// //     setVisible(!visible)\n// //   }\n// //   return (\n// //     <div>\n// //       <div style={hideWhenVisible}>\n// //         <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n// //       </div>\n// //       <div style={showWhenVisible}>\n// //         {props.children}\n// //         <button onClick={toggleVisibility}>cancel</button>\n// //       </div>\n// //     </div>\n// //   )\n// // }\n// // export default Togglable\n//Cypress Test\nimport{useState,useImperativeHandle,forwardRef}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Togglable=/*#__PURE__*/forwardRef(function(props,ref){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),visible=_useState2[0],setVisible=_useState2[1];var hideWhenVisible={display:visible?'none':''};var showWhenVisible={display:visible?'':'none'};console.log(visible);var toggleVisibility=function toggleVisibility(){console.log('PERKELE');setVisible(!visible);};useImperativeHandle(ref,function(){return{toggleVisibility:toggleVisibility};});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{style:hideWhenVisible,children:/*#__PURE__*/_jsx(\"button\",{onClick:toggleVisibility,children:props.buttonLabel})}),/*#__PURE__*/_jsxs(\"div\",{style:showWhenVisible,className:\"togglableContent\",children:[props.children,/*#__PURE__*/_jsx(\"button\",{onClick:toggleVisibility,children:\"cancel\"})]})]});});Togglable.displayName='Togglable';export default Togglable;","map":{"version":3,"names":["useState","useImperativeHandle","forwardRef","Togglable","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","console","log","toggleVisibility","buttonLabel","children","displayName"],"sources":["/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/fullstackopen/src/part5/src/components/Togglable.js"],"sourcesContent":["// import { useState, forwardRef, useImperativeHandle } from 'react'\n// import PropTypes from 'prop-types'\n\n\n// const Togglable = forwardRef((props, refs) => {\n//   const [visible, setVisible] = useState(false)\n\n//   const hideWhenVisible = { display: visible ? 'none' : '' }\n//   const showWhenVisible = { display: visible ? '' : 'none' }\n\n//   const toggleVisibility = () => {\n//     setVisible(!visible)\n//   }\n\n//   useImperativeHandle(refs, () => {\n//     return {\n//       toggleVisibility\n//     }\n//   })\n  \n//   Togglable.propTypes = {\n//     buttonLabel: PropTypes.string.isRequired\n//   }\n\n//   Togglable.displayName = 'Togglable'\n\n//   return (\n//     <div>\n//       <div style={hideWhenVisible}>\n//         <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n//       </div>\n//       <div style={showWhenVisible} className='togglableContent'>\n//         {props.children}\n//         <button onClick={toggleVisibility}>cancel</button>\n//       </div>\n//     </div>\n//   )\n// })\n\n// export default Togglable\n\n// // import { useState } from 'react'\n\n// // const Togglable = (props) => {\n// //   const [visible, setVisible] = useState(false)\n\n// //   const hideWhenVisible = { display: visible ? 'none' : '' }\n// //   const showWhenVisible = { display: visible ? '' : 'none' }\n\n// //   const toggleVisibility = () => {\n// //     setVisible(!visible)\n// //   }\n\n// //   return (\n// //     <div>\n// //       <div style={hideWhenVisible}>\n// //         <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n// //       </div>\n// //       <div style={showWhenVisible}>\n// //         {props.children}\n// //         <button onClick={toggleVisibility}>cancel</button>\n// //       </div>\n// //     </div>\n// //   )\n// // }\n\n// // export default Togglable\n\n//Cypress Test\nimport { useState, useImperativeHandle, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  console.log(visible)\n\n  const toggleVisibility = () => {\n    console.log('PERKELE')\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible} className=\"togglableContent\">\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.displayName = 'Togglable'\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nexport default Togglable"],"mappings":"qKAAA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA,OAASA,QAAQ,CAAEC,mBAAmB,CAAEC,UAAU,KAAQ,OAAO,yFAGjE,GAAMC,UAAS,cAAGD,UAAU,CAAC,SAACE,KAAK,CAAEC,GAAG,CAAK,CAC3C,cAA8BL,QAAQ,CAAC,KAAK,CAAC,wCAAtCM,OAAO,eAAEC,UAAU,eAE1B,GAAMC,gBAAe,CAAG,CAAEC,OAAO,CAAEH,OAAO,CAAG,MAAM,CAAG,EAAG,CAAC,CAC1D,GAAMI,gBAAe,CAAG,CAAED,OAAO,CAAEH,OAAO,CAAG,EAAE,CAAG,MAAO,CAAC,CAE1DK,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC,CAEpB,GAAMO,iBAAgB,CAAG,QAAnBA,iBAAgB,EAAS,CAC7BF,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC,CACtBL,UAAU,CAAC,CAACD,OAAO,CAAC,CACtB,CAAC,CAEDL,mBAAmB,CAACI,GAAG,CAAE,UAAM,CAC7B,MAAO,CACLQ,gBAAgB,CAAhBA,gBACF,CAAC,CACH,CAAC,CAAC,CAEF,mBACE,oCACE,YAAK,KAAK,CAAEL,eAAgB,uBAC1B,eAAQ,OAAO,CAAEK,gBAAiB,UAAET,KAAK,CAACU,WAAW,EAAU,EAC3D,cACN,aAAK,KAAK,CAAEJ,eAAgB,CAAC,SAAS,CAAC,kBAAkB,WACtDN,KAAK,CAACW,QAAQ,cACf,eAAQ,OAAO,CAAEF,gBAAiB,UAAC,QAAM,EAAS,GAC9C,GACF,CAEV,CAAC,CAAC,CAEFV,SAAS,CAACa,WAAW,CAAG,WAAW,CAMnC,cAAeb,UAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}