{"ast":null,"code":"var _jsxFileName = \"/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/fullstackopen/src/part5/src/App.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect, useRef } from 'react'\n\n// import Note from './components/Note'\n// import Notification from './components/Notification'\n// import Footer from './components/Footer'\n// import LoginForm from './components/LoginForm'\n// import NoteForm from './components/NoteForm'\n// import Togglable from './components/Togglable'\n// import noteService from './services/notes'\n// import loginService from './services/login'\n\n// const App = () => {\n//   const [notes, setNotes] = useState([])\n//   const [showAll, setShowAll] = useState(true)\n//   const [errorMessage, setErrorMessage] = useState(null)\n//   const [username, setUsername] = useState('') \n//   const [password, setPassword] = useState('') \n//   const [user, setUser] = useState(null)\n//   const [label, setLabel] = useState('')\n\n//   const noteFormRef = useRef()\n\n//   useEffect(() => {\n//     noteService\n//       .getAll()\n//       .then(initialNotes => {\n//         setNotes(initialNotes)\n//       })\n//   }, [label])\n\n//   useEffect(() => {\n//     const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n//     if (loggedUserJSON) {\n//       const user = JSON.parse(loggedUserJSON)\n//       setUser(user)\n//       noteService.setToken(user.token)\n//     }\n//   }, [])\n\n//   const updateLabel = (label) => {\n//     setTimeout(() => {\n//         setLabel(label);\n//     }, 0);\n// }\n\n//   const handleLogin = async (event) => {\n//     event.preventDefault()\n//     try {\n//       const user = await loginService.login({\n//         username, password,\n//       })\n\n//       window.localStorage.setItem(\n//         'loggedNoteappUser', JSON.stringify(user)\n//       ) \n//       noteService.setToken(user.token)\n//       setUser(user)\n//       setUsername('')\n//       setPassword('')\n//       console.log('logging in with', username, password)\n//     } catch (exception) {\n//       setErrorMessage('Wrong credentials')\n//       setTimeout(() => {\n//         setErrorMessage(null)\n//       }, 5000)\n//     }\n//   }\n\n//   const handleLogOut =(e) => {\n//     e.preventDefault()\n//     window.localStorage.clear()\n//     setUser(null)\n//   }\n\n//   const addNote = (noteObject) => {\n//     noteFormRef.current.toggleVisibility()\n//     noteService\n//       .create(noteObject)\n//       .then(returnedNote => {\n//         setNotes(notes.concat(returnedNote))\n//       })\n//   }\n//   // const addNote = (event) => {\n//   //   event.preventDefault()\n//   //   noteFormRef.current.toggleVisibility()\n//   //   const noteObject = {\n//   //       content: newNote,\n//   //       date: new Date().toISOString(),\n//   //       important: Math.random() > 0.5,\n//   //       id: notes.length + 1,\n//   //     }\n//   //   noteService\n//   //   .create(noteObject)\n//   //   .then(returnedNote => {     \n//   //     setNotes(notes.concat(returnedNote))\n//   //     setNewNote('')\n//   //   })\n//   // }\n//   // const addNote = (event) => {\n//   //   event.preventDefault()\n//     // const noteObject = {\n//     //   content: newNote,\n//     //   date: new Date().toISOString(),\n//     //   important: Math.random() > 0.5,\n//     //   id: notes.length + 1,\n//     // }\n\n//   //   noteService\n//   //     .create(noteObject)\n//   //     .then(returnedNote => {\n//   //       setNotes(notes.concat(returnedNote))\n//   //       setNewNote('')\n//   //     })\n//   // }\n\n//   // const handleNoteChange = (event) => {\n//   //   setNewNote(event.target.value)\n//   // }\n\n//   const toggleImportanceOf = id => {\n//     const note = notes.find(n => n.id === id)\n//     const changedNote = { ...note, important: !note.important }\n\n//     noteService\n//       .update(id, changedNote)\n//       .then(returnedNote => {\n//         setNotes(notes.map(note => note._id === id ? returnedNote : note))\n//       })\n//       .catch(error => {\n//         setErrorMessage(\n//           `Note '${note.content}' was already removed from server`\n//         )\n//         setTimeout(() => {\n//           setErrorMessage(null)\n//         }, 5000)\n//         setNotes(notes.filter(n => n.id !== id))\n//       })\n//   }\n\n//   // const loginForm = () => (\n//   //   <form onSubmit={handleLogin}>\n//   //     <div>\n//   //       username\n//   //         <input\n//   //         type=\"text\"\n//   //         value={username}\n//   //         name=\"Username\"\n//   //         onChange={({ target }) => setUsername(target.value)}\n//   //       />\n//   //     </div>\n//   //     <div>\n//   //       password\n//   //         <input\n//   //         type=\"password\"\n//   //         value={password}\n//   //         name=\"Password\"\n//   //         onChange={({ target }) => setPassword(target.value)}\n//   //       />\n//   //     </div>\n//   //     <button type=\"submit\">login</button>\n//   //   </form>      \n//   // )\n\n//   // const loginForm = () => {\n//   //   const hideWhenVisible = { display: loginVisible ? 'none' : '' }\n//   //   const showWhenVisible = { display: loginVisible ? '' : 'none' }\n\n//   //   return (\n//   //     <div>\n//   //       <div style={hideWhenVisible}>\n//   //         <button onClick={() => setLoginVisible(true)}>log in</button>\n//   //       </div>\n//   //       <div style={showWhenVisible}>\n//   //         <LoginForm\n//   //           username={username}\n//   //           password={password}\n//   //           handleUsernameChange={({ target }) => setUsername(target.value)}\n//   //           handlePasswordChange={({ target }) => setPassword(target.value)}\n//   //           handleSubmit={handleLogin}\n//   //         />\n//   //         <button onClick={() => setLoginVisible(false)}>cancel</button>\n//   //       </div>\n//   //     </div>\n//   //   )\n//   // }\n\n//   const noteForm = () => (\n//     <Togglable buttonLabel='new note' ref={noteFormRef}>\n//       <NoteForm createNote={addNote} />\n//     </Togglable>\n//   )\n//   // const NoteForm = ({ onSubmit, handleChange, value}) => {\n//   //   return (\n//   //     <div>\n//   //       <h2>Create a new note</h2>\n\n//   //       <form onSubmit={onSubmit}>\n//   //         <input\n//   //           value={value}\n//   //           onChange={handleChange}\n//   //         />\n//   //         <button type=\"submit\">save</button>\n//   //       </form>\n//   //     </div>\n//   //   )\n//   // }\n\n//   // const noteForm = () => (\n//   //   <form onSubmit={addNote}>\n//   //     <input\n//   //       value={newNote}\n//   //       onChange={handleNoteChange}\n//   //     />\n//   //     <button type=\"submit\">save</button>\n//   //   </form>  \n//   // )\n\n//   const notesToShow = showAll\n//     ? notes\n//     : notes.filter(note => note.important)\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <Notification message={errorMessage} />\n\n//       {user === null ?\n//         <Togglable buttonLabel='login'>\n//           <LoginForm\n//             username={username}\n//             password={password}\n//             handleUsernameChange={({ target }) => setUsername(target.value)}\n//             handlePasswordChange={({ target }) => setPassword(target.value)}\n//             handleSubmit={handleLogin}\n//           />\n//         </Togglable> :\n//       <div>\n//         <p>{user.name} logged in</p>\n//         <button onClick={handleLogOut}>Logout</button>\n//       </div>\n//     }\n\n//       <div style={{marginTop: 10}}>\n//         <button onClick={() => setShowAll(!showAll)}>\n//           show {showAll ? 'important' : 'all' }\n//         </button>\n//       </div>   \n//       <ul>\n//         {notesToShow.map(note => \n//           <Note\n//             key={note.id}\n//             note={note}\n//             toggleImportance={toggleImportanceOf}\n//             updateLabel={updateLabel}\n//           />\n//         )}\n//       </ul>\n//         {noteForm()}\n\n//       <Footer />\n//     </div>\n//   )\n// }\n\n// export default App\n\n//Cypress test\nimport { useState, useEffect, useRef } from 'react';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\nimport LoginForm from './components/LoginForm';\nimport NoteForm from './components/NoteForm';\nimport Togglable from './components/Togglable';\nimport noteService from './services/notes';\nimport loginService from './services/login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser');\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      setUser(user);\n      noteService.setToken(user.token);\n    }\n  }, []);\n  const noteFormRef = useRef();\n  const handleLogin = async event => {\n    event.preventDefault();\n    try {\n      const user = await loginService.login({\n        username,\n        password\n      });\n      noteService.setToken(user.token);\n      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user));\n      setUser(user);\n      setUsername('');\n      setPassword('');\n    } catch (exception) {\n      setErrorMessage('wrong credentials');\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n    }\n  };\n  const handleLogOut = e => {\n    e.preventDefault();\n    window.localStorage.clear();\n    setUser(null);\n  };\n  const addNote = noteObject => {\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      noteFormRef.current.toggleVisibility();\n    });\n  };\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = {\n      ...note,\n      important: !note.important\n    };\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    }).catch(() => {\n      setErrorMessage(`Note '${note.content}' was already removed from server`);\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n      setNotes(notes.filter(n => n.id !== id));\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes app\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), !user && /*#__PURE__*/_jsxDEV(Togglable, {\n      buttonLabel: \"login\",\n      children: /*#__PURE__*/_jsxDEV(LoginForm, {\n        username: username,\n        password: password,\n        handleUsernameChange: _ref => {\n          let {\n            target\n          } = _ref;\n          return setUsername(target.value);\n        },\n        handlePasswordChange: _ref2 => {\n          let {\n            target\n          } = _ref2;\n          return setPassword(target.value);\n        },\n        handleSubmit: handleLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 9\n    }, this), user && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [user.name, \" logged in\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogOut,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Togglable, {\n        buttonLabel: \"new note\",\n        ref: noteFormRef,\n        children: /*#__PURE__*/_jsxDEV(NoteForm, {\n          createNote: addNote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowAll(!showAll),\n        children: [\"show \", showAll ? 'important' : 'all']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notesToShow.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        note: note,\n        toggleImportance: () => toggleImportanceOf(note.id)\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"uXLDh0o6DxWzRsQHRsqfri/hlRY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useRef","Note","Notification","Footer","LoginForm","NoteForm","Togglable","noteService","loginService","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","getAll","then","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","setToken","token","noteFormRef","handleLogin","event","preventDefault","login","setItem","stringify","exception","setTimeout","handleLogOut","e","clear","addNote","noteObject","create","returnedNote","concat","current","toggleVisibility","notesToShow","filter","note","important","toggleImportanceOf","id","find","n","changedNote","update","map","catch","content","target","value","name"],"sources":["/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/fullstackopen/src/part5/src/App.js"],"sourcesContent":["// import { useState, useEffect, useRef } from 'react'\n\n// import Note from './components/Note'\n// import Notification from './components/Notification'\n// import Footer from './components/Footer'\n// import LoginForm from './components/LoginForm'\n// import NoteForm from './components/NoteForm'\n// import Togglable from './components/Togglable'\n// import noteService from './services/notes'\n// import loginService from './services/login'\n\n\n// const App = () => {\n//   const [notes, setNotes] = useState([])\n//   const [showAll, setShowAll] = useState(true)\n//   const [errorMessage, setErrorMessage] = useState(null)\n//   const [username, setUsername] = useState('') \n//   const [password, setPassword] = useState('') \n//   const [user, setUser] = useState(null)\n//   const [label, setLabel] = useState('')\n\n//   const noteFormRef = useRef()\n\n//   useEffect(() => {\n//     noteService\n//       .getAll()\n//       .then(initialNotes => {\n//         setNotes(initialNotes)\n//       })\n//   }, [label])\n\n//   useEffect(() => {\n//     const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n//     if (loggedUserJSON) {\n//       const user = JSON.parse(loggedUserJSON)\n//       setUser(user)\n//       noteService.setToken(user.token)\n//     }\n//   }, [])\n\n//   const updateLabel = (label) => {\n//     setTimeout(() => {\n//         setLabel(label);\n//     }, 0);\n// }\n\n//   const handleLogin = async (event) => {\n//     event.preventDefault()\n//     try {\n//       const user = await loginService.login({\n//         username, password,\n//       })\n\n//       window.localStorage.setItem(\n//         'loggedNoteappUser', JSON.stringify(user)\n//       ) \n//       noteService.setToken(user.token)\n//       setUser(user)\n//       setUsername('')\n//       setPassword('')\n//       console.log('logging in with', username, password)\n//     } catch (exception) {\n//       setErrorMessage('Wrong credentials')\n//       setTimeout(() => {\n//         setErrorMessage(null)\n//       }, 5000)\n//     }\n//   }\n\n//   const handleLogOut =(e) => {\n//     e.preventDefault()\n//     window.localStorage.clear()\n//     setUser(null)\n//   }\n\n//   const addNote = (noteObject) => {\n//     noteFormRef.current.toggleVisibility()\n//     noteService\n//       .create(noteObject)\n//       .then(returnedNote => {\n//         setNotes(notes.concat(returnedNote))\n//       })\n//   }\n//   // const addNote = (event) => {\n//   //   event.preventDefault()\n//   //   noteFormRef.current.toggleVisibility()\n//   //   const noteObject = {\n//   //       content: newNote,\n//   //       date: new Date().toISOString(),\n//   //       important: Math.random() > 0.5,\n//   //       id: notes.length + 1,\n//   //     }\n//   //   noteService\n//   //   .create(noteObject)\n//   //   .then(returnedNote => {     \n//   //     setNotes(notes.concat(returnedNote))\n//   //     setNewNote('')\n//   //   })\n//   // }\n//   // const addNote = (event) => {\n//   //   event.preventDefault()\n//     // const noteObject = {\n//     //   content: newNote,\n//     //   date: new Date().toISOString(),\n//     //   important: Math.random() > 0.5,\n//     //   id: notes.length + 1,\n//     // }\n\n//   //   noteService\n//   //     .create(noteObject)\n//   //     .then(returnedNote => {\n//   //       setNotes(notes.concat(returnedNote))\n//   //       setNewNote('')\n//   //     })\n//   // }\n\n//   // const handleNoteChange = (event) => {\n//   //   setNewNote(event.target.value)\n//   // }\n\n//   const toggleImportanceOf = id => {\n//     const note = notes.find(n => n.id === id)\n//     const changedNote = { ...note, important: !note.important }\n  \n//     noteService\n//       .update(id, changedNote)\n//       .then(returnedNote => {\n//         setNotes(notes.map(note => note._id === id ? returnedNote : note))\n//       })\n//       .catch(error => {\n//         setErrorMessage(\n//           `Note '${note.content}' was already removed from server`\n//         )\n//         setTimeout(() => {\n//           setErrorMessage(null)\n//         }, 5000)\n//         setNotes(notes.filter(n => n.id !== id))\n//       })\n//   }\n\n//   // const loginForm = () => (\n//   //   <form onSubmit={handleLogin}>\n//   //     <div>\n//   //       username\n//   //         <input\n//   //         type=\"text\"\n//   //         value={username}\n//   //         name=\"Username\"\n//   //         onChange={({ target }) => setUsername(target.value)}\n//   //       />\n//   //     </div>\n//   //     <div>\n//   //       password\n//   //         <input\n//   //         type=\"password\"\n//   //         value={password}\n//   //         name=\"Password\"\n//   //         onChange={({ target }) => setPassword(target.value)}\n//   //       />\n//   //     </div>\n//   //     <button type=\"submit\">login</button>\n//   //   </form>      \n//   // )\n  \n  \n  \n//   // const loginForm = () => {\n//   //   const hideWhenVisible = { display: loginVisible ? 'none' : '' }\n//   //   const showWhenVisible = { display: loginVisible ? '' : 'none' }\n\n//   //   return (\n//   //     <div>\n//   //       <div style={hideWhenVisible}>\n//   //         <button onClick={() => setLoginVisible(true)}>log in</button>\n//   //       </div>\n//   //       <div style={showWhenVisible}>\n//   //         <LoginForm\n//   //           username={username}\n//   //           password={password}\n//   //           handleUsernameChange={({ target }) => setUsername(target.value)}\n//   //           handlePasswordChange={({ target }) => setPassword(target.value)}\n//   //           handleSubmit={handleLogin}\n//   //         />\n//   //         <button onClick={() => setLoginVisible(false)}>cancel</button>\n//   //       </div>\n//   //     </div>\n//   //   )\n//   // }\n\n//   const noteForm = () => (\n//     <Togglable buttonLabel='new note' ref={noteFormRef}>\n//       <NoteForm createNote={addNote} />\n//     </Togglable>\n//   )\n//   // const NoteForm = ({ onSubmit, handleChange, value}) => {\n//   //   return (\n//   //     <div>\n//   //       <h2>Create a new note</h2>\n  \n//   //       <form onSubmit={onSubmit}>\n//   //         <input\n//   //           value={value}\n//   //           onChange={handleChange}\n//   //         />\n//   //         <button type=\"submit\">save</button>\n//   //       </form>\n//   //     </div>\n//   //   )\n//   // }\n\n//   // const noteForm = () => (\n//   //   <form onSubmit={addNote}>\n//   //     <input\n//   //       value={newNote}\n//   //       onChange={handleNoteChange}\n//   //     />\n//   //     <button type=\"submit\">save</button>\n//   //   </form>  \n//   // )\n\n//   const notesToShow = showAll\n//     ? notes\n//     : notes.filter(note => note.important)\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <Notification message={errorMessage} />\n\n//       {user === null ?\n//         <Togglable buttonLabel='login'>\n//           <LoginForm\n//             username={username}\n//             password={password}\n//             handleUsernameChange={({ target }) => setUsername(target.value)}\n//             handlePasswordChange={({ target }) => setPassword(target.value)}\n//             handleSubmit={handleLogin}\n//           />\n//         </Togglable> :\n//       <div>\n//         <p>{user.name} logged in</p>\n//         <button onClick={handleLogOut}>Logout</button>\n//       </div>\n//     }\n\n//       <div style={{marginTop: 10}}>\n//         <button onClick={() => setShowAll(!showAll)}>\n//           show {showAll ? 'important' : 'all' }\n//         </button>\n//       </div>   \n//       <ul>\n//         {notesToShow.map(note => \n//           <Note\n//             key={note.id}\n//             note={note}\n//             toggleImportance={toggleImportanceOf}\n//             updateLabel={updateLabel}\n//           />\n//         )}\n//       </ul>\n//         {noteForm()}\n\n//       <Footer />\n//     </div>\n//   )\n// }\n\n// export default App\n\n//Cypress test\nimport { useState, useEffect, useRef } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport LoginForm from './components/LoginForm'\nimport NoteForm from './components/NoteForm'\nimport Togglable from './components/Togglable'\nimport noteService from './services/notes'\nimport loginService from './services/login'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const noteFormRef = useRef()\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n      noteService.setToken(user.token)\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const handleLogOut =(e) => {\n        e.preventDefault()\n        window.localStorage.clear()\n        setUser(null)\n      }\n\n  const addNote = (noteObject) => {\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        noteFormRef.current.toggleVisibility()\n      })\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote).then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(() => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes app</h1>\n\n      <Notification message={errorMessage} />\n\n      {!user &&\n        <Togglable buttonLabel=\"login\">\n          <LoginForm\n            username={username}\n            password={password}\n            handleUsernameChange={({ target }) => setUsername(target.value)}\n            handlePasswordChange={({ target }) => setPassword(target.value)}\n            handleSubmit={handleLogin}\n          />\n        </Togglable>\n      }\n      {user &&\n        <div>\n          <p>{user.name} logged in</p>\n          <button onClick={handleLogOut}>Logout</button>\n          <Togglable buttonLabel=\"new note\" ref={noteFormRef}>\n            <NoteForm createNote={addNote} />\n          </Togglable>\n        </div>\n      }\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n\n      <Footer />\n    </div>\n  )\n}\n\nexport default App"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE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"},"metadata":{},"sourceType":"module","externalDependencies":[]}