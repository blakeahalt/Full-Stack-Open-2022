{"ast":null,"code":"// import { useState, useEffect, useRef } from 'react'\n\n// import Note from './components/Note'\n// import Notification from './components/Notification'\n// import Footer from './components/Footer'\n// import LoginForm from './components/LoginForm'\n// import NoteForm from './components/NoteForm'\n// import Togglable from './components/Togglable'\n// import noteService from './services/notes'\n// import loginService from './services/login'\n\n// const App = () => {\n//   const [notes, setNotes] = useState([])\n//   const [showAll, setShowAll] = useState(true)\n//   const [errorMessage, setErrorMessage] = useState(null)\n//   const [username, setUsername] = useState('') \n//   const [password, setPassword] = useState('') \n//   const [user, setUser] = useState(null)\n//   const [label, setLabel] = useState('')\n\n//   const noteFormRef = useRef()\n\n//   useEffect(() => {\n//     noteService\n//       .getAll()\n//       .then(initialNotes => {\n//         setNotes(initialNotes)\n//       })\n//   }, [label])\n\n//   useEffect(() => {\n//     const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n//     if (loggedUserJSON) {\n//       const user = JSON.parse(loggedUserJSON)\n//       setUser(user)\n//       noteService.setToken(user.token)\n//     }\n//   }, [])\n\n//   const updateLabel = (label) => {\n//     setTimeout(() => {\n//         setLabel(label);\n//     }, 0);\n// }\n\n//   const handleLogin = async (event) => {\n//     event.preventDefault()\n//     try {\n//       const user = await loginService.login({\n//         username, password,\n//       })\n\n//       window.localStorage.setItem(\n//         'loggedNoteappUser', JSON.stringify(user)\n//       ) \n//       noteService.setToken(user.token)\n//       setUser(user)\n//       setUsername('')\n//       setPassword('')\n//       console.log('logging in with', username, password)\n//     } catch (exception) {\n//       setErrorMessage('Wrong credentials')\n//       setTimeout(() => {\n//         setErrorMessage(null)\n//       }, 5000)\n//     }\n//   }\n\n//   const handleLogOut =(e) => {\n//     e.preventDefault()\n//     window.localStorage.clear()\n//     setUser(null)\n//   }\n\n//   const addNote = (noteObject) => {\n//     noteFormRef.current.toggleVisibility()\n//     noteService\n//       .create(noteObject)\n//       .then(returnedNote => {\n//         setNotes(notes.concat(returnedNote))\n//         noteFormRef.current.toggleVisibility()\n//       })\n//   }\n//   // const addNote = (event) => {\n//   //   event.preventDefault()\n//   //   noteFormRef.current.toggleVisibility()\n//   //   const noteObject = {\n//   //       content: newNote,\n//   //       date: new Date().toISOString(),\n//   //       important: Math.random() > 0.5,\n//   //       id: notes.length + 1,\n//   //     }\n//   //   noteService\n//   //   .create(noteObject)\n//   //   .then(returnedNote => {     \n//   //     setNotes(notes.concat(returnedNote))\n//   //     setNewNote('')\n//   //   })\n//   // }\n//   // const addNote = (event) => {\n//   //   event.preventDefault()\n//     // const noteObject = {\n//     //   content: newNote,\n//     //   date: new Date().toISOString(),\n//     //   important: Math.random() > 0.5,\n//     //   id: notes.length + 1,\n//     // }\n\n//   //   noteService\n//   //     .create(noteObject)\n//   //     .then(returnedNote => {\n//   //       setNotes(notes.concat(returnedNote))\n//   //       setNewNote('')\n//   //     })\n//   // }\n\n//   // const handleNoteChange = (event) => {\n//   //   setNewNote(event.target.value)\n//   // }\n\n//   const toggleImportanceOf = id => {\n//     const note = notes.find(n => n.id === id)\n//     const changedNote = { ...note, important: !note.important }\n\n//     noteService\n//       .update(id, changedNote)\n//       .then(returnedNote => {\n//         setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n//       })\n//       .catch(() => {\n//         setErrorMessage(\n//           `Note '${note.content}' was already removed from server`\n//         )\n//         setTimeout(() => {\n//           setErrorMessage(null)\n//         }, 5000)\n//         setNotes(notes.filter(n => n.id !== id))\n//       })\n//   }\n\n//   // const loginForm = () => (\n//   //   <form onSubmit={handleLogin}>\n//   //     <div>\n//   //       username\n//   //         <input\n//   //         type=\"text\"\n//   //         value={username}\n//   //         name=\"Username\"\n//   //         onChange={({ target }) => setUsername(target.value)}\n//   //       />\n//   //     </div>\n//   //     <div>\n//   //       password\n//   //         <input\n//   //         type=\"password\"\n//   //         value={password}\n//   //         name=\"Password\"\n//   //         onChange={({ target }) => setPassword(target.value)}\n//   //       />\n//   //     </div>\n//   //     <button type=\"submit\">login</button>\n//   //   </form>      \n//   // )\n\n//   // const loginForm = () => {\n//   //   const hideWhenVisible = { display: loginVisible ? 'none' : '' }\n//   //   const showWhenVisible = { display: loginVisible ? '' : 'none' }\n\n//   //   return (\n//   //     <div>\n//   //       <div style={hideWhenVisible}>\n//   //         <button onClick={() => setLoginVisible(true)}>log in</button>\n//   //       </div>\n//   //       <div style={showWhenVisible}>\n//   //         <LoginForm\n//   //           username={username}\n//   //           password={password}\n//   //           handleUsernameChange={({ target }) => setUsername(target.value)}\n//   //           handlePasswordChange={({ target }) => setPassword(target.value)}\n//   //           handleSubmit={handleLogin}\n//   //         />\n//   //         <button onClick={() => setLoginVisible(false)}>cancel</button>\n//   //       </div>\n//   //     </div>\n//   //   )\n//   // }\n\n//   const noteForm = () => (\n//     <Togglable buttonLabel='new note' ref={noteFormRef}>\n//       <NoteForm createNote={addNote} />\n//     </Togglable>\n//   )\n//   // const NoteForm = ({ onSubmit, handleChange, value}) => {\n//   //   return (\n//   //     <div>\n//   //       <h2>Create a new note</h2>\n\n//   //       <form onSubmit={onSubmit}>\n//   //         <input\n//   //           value={value}\n//   //           onChange={handleChange}\n//   //         />\n//   //         <button type=\"submit\">save</button>\n//   //       </form>\n//   //     </div>\n//   //   )\n//   // }\n\n//   // const noteForm = () => (\n//   //   <form onSubmit={addNote}>\n//   //     <input\n//   //       value={newNote}\n//   //       onChange={handleNoteChange}\n//   //     />\n//   //     <button type=\"submit\">save</button>\n//   //   </form>  \n//   // )\n\n//   const notesToShow = showAll\n//     ? notes\n//     : notes.filter(note => note.important)\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <Notification message={errorMessage} />\n\n//       {user === null ?\n//         <Togglable buttonLabel='login'>\n//           <LoginForm\n//             username={username}\n//             password={password}\n//             handleUsernameChange={({ target }) => setUsername(target.value)}\n//             handlePasswordChange={({ target }) => setPassword(target.value)}\n//             handleSubmit={handleLogin}\n//           />\n//         </Togglable> :\n//       <div>\n//         <p>{user.name} logged in</p>\n//         <button onClick={handleLogOut}>Logout</button>\n//       </div>\n//     }\n\n//       <div style={{marginTop: 10}}>\n//         <button onClick={() => setShowAll(!showAll)}>\n//           show {showAll ? 'important' : 'all' }\n//         </button>\n//       </div>   \n//       <ul>\n//         {notesToShow.map(note => \n//           <Note\n//             key={note.id}\n//             note={note}\n//             toggleImportance={toggleImportanceOf}\n//             updateLabel={updateLabel}\n//           />\n//         )}\n//       </ul>\n//         {noteForm()}\n\n//       <Footer />\n//     </div>\n//   )\n// }\n\n// export default App","map":{"version":3,"names":[],"sources":["/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/fullstackopen/src/part5/src/App.js"],"sourcesContent":["// import { useState, useEffect, useRef } from 'react'\n\n// import Note from './components/Note'\n// import Notification from './components/Notification'\n// import Footer from './components/Footer'\n// import LoginForm from './components/LoginForm'\n// import NoteForm from './components/NoteForm'\n// import Togglable from './components/Togglable'\n// import noteService from './services/notes'\n// import loginService from './services/login'\n\n\n// const App = () => {\n//   const [notes, setNotes] = useState([])\n//   const [showAll, setShowAll] = useState(true)\n//   const [errorMessage, setErrorMessage] = useState(null)\n//   const [username, setUsername] = useState('') \n//   const [password, setPassword] = useState('') \n//   const [user, setUser] = useState(null)\n//   const [label, setLabel] = useState('')\n\n//   const noteFormRef = useRef()\n\n//   useEffect(() => {\n//     noteService\n//       .getAll()\n//       .then(initialNotes => {\n//         setNotes(initialNotes)\n//       })\n//   }, [label])\n\n//   useEffect(() => {\n//     const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n//     if (loggedUserJSON) {\n//       const user = JSON.parse(loggedUserJSON)\n//       setUser(user)\n//       noteService.setToken(user.token)\n//     }\n//   }, [])\n\n//   const updateLabel = (label) => {\n//     setTimeout(() => {\n//         setLabel(label);\n//     }, 0);\n// }\n\n//   const handleLogin = async (event) => {\n//     event.preventDefault()\n//     try {\n//       const user = await loginService.login({\n//         username, password,\n//       })\n\n//       window.localStorage.setItem(\n//         'loggedNoteappUser', JSON.stringify(user)\n//       ) \n//       noteService.setToken(user.token)\n//       setUser(user)\n//       setUsername('')\n//       setPassword('')\n//       console.log('logging in with', username, password)\n//     } catch (exception) {\n//       setErrorMessage('Wrong credentials')\n//       setTimeout(() => {\n//         setErrorMessage(null)\n//       }, 5000)\n//     }\n//   }\n\n//   const handleLogOut =(e) => {\n//     e.preventDefault()\n//     window.localStorage.clear()\n//     setUser(null)\n//   }\n\n//   const addNote = (noteObject) => {\n//     noteFormRef.current.toggleVisibility()\n//     noteService\n//       .create(noteObject)\n//       .then(returnedNote => {\n//         setNotes(notes.concat(returnedNote))\n//         noteFormRef.current.toggleVisibility()\n//       })\n//   }\n//   // const addNote = (event) => {\n//   //   event.preventDefault()\n//   //   noteFormRef.current.toggleVisibility()\n//   //   const noteObject = {\n//   //       content: newNote,\n//   //       date: new Date().toISOString(),\n//   //       important: Math.random() > 0.5,\n//   //       id: notes.length + 1,\n//   //     }\n//   //   noteService\n//   //   .create(noteObject)\n//   //   .then(returnedNote => {     \n//   //     setNotes(notes.concat(returnedNote))\n//   //     setNewNote('')\n//   //   })\n//   // }\n//   // const addNote = (event) => {\n//   //   event.preventDefault()\n//     // const noteObject = {\n//     //   content: newNote,\n//     //   date: new Date().toISOString(),\n//     //   important: Math.random() > 0.5,\n//     //   id: notes.length + 1,\n//     // }\n\n//   //   noteService\n//   //     .create(noteObject)\n//   //     .then(returnedNote => {\n//   //       setNotes(notes.concat(returnedNote))\n//   //       setNewNote('')\n//   //     })\n//   // }\n\n//   // const handleNoteChange = (event) => {\n//   //   setNewNote(event.target.value)\n//   // }\n\n//   const toggleImportanceOf = id => {\n//     const note = notes.find(n => n.id === id)\n//     const changedNote = { ...note, important: !note.important }\n  \n//     noteService\n//       .update(id, changedNote)\n//       .then(returnedNote => {\n//         setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n//       })\n//       .catch(() => {\n//         setErrorMessage(\n//           `Note '${note.content}' was already removed from server`\n//         )\n//         setTimeout(() => {\n//           setErrorMessage(null)\n//         }, 5000)\n//         setNotes(notes.filter(n => n.id !== id))\n//       })\n//   }\n\n//   // const loginForm = () => (\n//   //   <form onSubmit={handleLogin}>\n//   //     <div>\n//   //       username\n//   //         <input\n//   //         type=\"text\"\n//   //         value={username}\n//   //         name=\"Username\"\n//   //         onChange={({ target }) => setUsername(target.value)}\n//   //       />\n//   //     </div>\n//   //     <div>\n//   //       password\n//   //         <input\n//   //         type=\"password\"\n//   //         value={password}\n//   //         name=\"Password\"\n//   //         onChange={({ target }) => setPassword(target.value)}\n//   //       />\n//   //     </div>\n//   //     <button type=\"submit\">login</button>\n//   //   </form>      \n//   // )\n  \n  \n  \n//   // const loginForm = () => {\n//   //   const hideWhenVisible = { display: loginVisible ? 'none' : '' }\n//   //   const showWhenVisible = { display: loginVisible ? '' : 'none' }\n\n//   //   return (\n//   //     <div>\n//   //       <div style={hideWhenVisible}>\n//   //         <button onClick={() => setLoginVisible(true)}>log in</button>\n//   //       </div>\n//   //       <div style={showWhenVisible}>\n//   //         <LoginForm\n//   //           username={username}\n//   //           password={password}\n//   //           handleUsernameChange={({ target }) => setUsername(target.value)}\n//   //           handlePasswordChange={({ target }) => setPassword(target.value)}\n//   //           handleSubmit={handleLogin}\n//   //         />\n//   //         <button onClick={() => setLoginVisible(false)}>cancel</button>\n//   //       </div>\n//   //     </div>\n//   //   )\n//   // }\n\n//   const noteForm = () => (\n//     <Togglable buttonLabel='new note' ref={noteFormRef}>\n//       <NoteForm createNote={addNote} />\n//     </Togglable>\n//   )\n//   // const NoteForm = ({ onSubmit, handleChange, value}) => {\n//   //   return (\n//   //     <div>\n//   //       <h2>Create a new note</h2>\n  \n//   //       <form onSubmit={onSubmit}>\n//   //         <input\n//   //           value={value}\n//   //           onChange={handleChange}\n//   //         />\n//   //         <button type=\"submit\">save</button>\n//   //       </form>\n//   //     </div>\n//   //   )\n//   // }\n\n//   // const noteForm = () => (\n//   //   <form onSubmit={addNote}>\n//   //     <input\n//   //       value={newNote}\n//   //       onChange={handleNoteChange}\n//   //     />\n//   //     <button type=\"submit\">save</button>\n//   //   </form>  \n//   // )\n\n//   const notesToShow = showAll\n//     ? notes\n//     : notes.filter(note => note.important)\n\n//   return (\n//     <div>\n//       <h1>Notes</h1>\n//       <Notification message={errorMessage} />\n\n//       {user === null ?\n//         <Togglable buttonLabel='login'>\n//           <LoginForm\n//             username={username}\n//             password={password}\n//             handleUsernameChange={({ target }) => setUsername(target.value)}\n//             handlePasswordChange={({ target }) => setPassword(target.value)}\n//             handleSubmit={handleLogin}\n//           />\n//         </Togglable> :\n//       <div>\n//         <p>{user.name} logged in</p>\n//         <button onClick={handleLogOut}>Logout</button>\n//       </div>\n//     }\n\n//       <div style={{marginTop: 10}}>\n//         <button onClick={() => setShowAll(!showAll)}>\n//           show {showAll ? 'important' : 'all' }\n//         </button>\n//       </div>   \n//       <ul>\n//         {notesToShow.map(note => \n//           <Note\n//             key={note.id}\n//             note={note}\n//             toggleImportance={toggleImportanceOf}\n//             updateLabel={updateLabel}\n//           />\n//         )}\n//       </ul>\n//         {noteForm()}\n\n//       <Footer />\n//     </div>\n//   )\n// }\n\n// export default App"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}