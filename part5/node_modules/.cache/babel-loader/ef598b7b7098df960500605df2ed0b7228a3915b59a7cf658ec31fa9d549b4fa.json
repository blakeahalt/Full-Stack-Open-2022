{"ast":null,"code":"// import { useState, forwardRef, useImperativeHandle } from 'react'\n// import PropTypes from 'prop-types'\n\n// const Togglable = forwardRef((props, refs) => {\n//   const [visible, setVisible] = useState(false)\n\n//   const hideWhenVisible = { display: visible ? 'none' : '' }\n//   const showWhenVisible = { display: visible ? '' : 'none' }\n\n//   const toggleVisibility = () => {\n//     setVisible(!visible)\n//   }\n\n//   useImperativeHandle(refs, () => {\n//     return {\n//       toggleVisibility\n//     }\n//   })\n\n//   Togglable.propTypes = {\n//     buttonLabel: PropTypes.string.isRequired\n//   }\n\n//   Togglable.displayName = 'Togglable'\n\n//   return (\n//     <div>\n//       <div style={hideWhenVisible}>\n//         <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n//       </div>\n//       <div style={showWhenVisible} className='togglableContent'>\n//         {props.children}\n//         <button onClick={toggleVisibility}>cancel</button>\n//       </div>\n//     </div>\n//   )\n// })\n\n// export default Togglable\n\n// // import { useState } from 'react'\n\n// // const Togglable = (props) => {\n// //   const [visible, setVisible] = useState(false)\n\n// //   const hideWhenVisible = { display: visible ? 'none' : '' }\n// //   const showWhenVisible = { display: visible ? '' : 'none' }\n\n// //   const toggleVisibility = () => {\n// //     setVisible(!visible)\n// //   }\n\n// //   return (\n// //     <div>\n// //       <div style={hideWhenVisible}>\n// //         <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n// //       </div>\n// //       <div style={showWhenVisible}>\n// //         {props.children}\n// //         <button onClick={toggleVisibility}>cancel</button>\n// //       </div>\n// //     </div>\n// //   )\n// // }\n\n// // export default Togglable","map":{"version":3,"names":[],"sources":["/Users/blakeahalt/Documents/GitHub/Full-Stack-Open-2022/fullstackopen/src/part5/src/components/Togglable.js"],"sourcesContent":["// import { useState, forwardRef, useImperativeHandle } from 'react'\n// import PropTypes from 'prop-types'\n\n\n// const Togglable = forwardRef((props, refs) => {\n//   const [visible, setVisible] = useState(false)\n\n//   const hideWhenVisible = { display: visible ? 'none' : '' }\n//   const showWhenVisible = { display: visible ? '' : 'none' }\n\n//   const toggleVisibility = () => {\n//     setVisible(!visible)\n//   }\n\n//   useImperativeHandle(refs, () => {\n//     return {\n//       toggleVisibility\n//     }\n//   })\n  \n//   Togglable.propTypes = {\n//     buttonLabel: PropTypes.string.isRequired\n//   }\n\n//   Togglable.displayName = 'Togglable'\n\n//   return (\n//     <div>\n//       <div style={hideWhenVisible}>\n//         <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n//       </div>\n//       <div style={showWhenVisible} className='togglableContent'>\n//         {props.children}\n//         <button onClick={toggleVisibility}>cancel</button>\n//       </div>\n//     </div>\n//   )\n// })\n\n// export default Togglable\n\n// // import { useState } from 'react'\n\n// // const Togglable = (props) => {\n// //   const [visible, setVisible] = useState(false)\n\n// //   const hideWhenVisible = { display: visible ? 'none' : '' }\n// //   const showWhenVisible = { display: visible ? '' : 'none' }\n\n// //   const toggleVisibility = () => {\n// //     setVisible(!visible)\n// //   }\n\n// //   return (\n// //     <div>\n// //       <div style={hideWhenVisible}>\n// //         <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n// //       </div>\n// //       <div style={showWhenVisible}>\n// //         {props.children}\n// //         <button onClick={toggleVisibility}>cancel</button>\n// //       </div>\n// //     </div>\n// //   )\n// // }\n\n// // export default Togglable"],"mappings":"AAAA;AACA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}